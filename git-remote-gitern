#!/usr/bin/env node
// see https://git-scm.com/docs/git-remote-helpers for details
const { spawn, spawnSync } = require('child_process')
const { resolve } = require('path')
const Mirror = require('./mirror.js')
const log = require('./logger.js')
const { lines } = require('./misc.js')
const { get } = require('./map.js')

const SPAWN_OPTS = { stdio: ['pipe', 'pipe', 'inherit'] }
const GITERN_MIRROR_REPO = ".git/gitern/encrypt"
const SPAWN_MIRROR_OPTS = { 
    cwd: GITERN_MIRROR_REPO,
    stdio: ['pipe', 'pipe', 'inherit'] 
}
const CRYPT_MAP = "refs/gitern/crypt.map"

const handleCapabilities = async () => {
    caps = ["fetch", "push"] //, TODO: "option"]
    caps.forEach((s, i) => console.log(s))
    console.log()
}

// list
// Lists the refs, one per line, in the format "<value> <name> [<attr>
// …​]". The value may be a hex sha1 hash, "@<dest>" for a symref, or
// "?" to indicate that the helper could not get the value of the
// ref. A space-separated list of attributes follows the name;
// unrecognized attributes are ignored. The list ends with a blank
// line.
//
// list for-push
// Similar to list, except that it is used if and only if the caller 
// wants to the resulting ref list to prepare push commands. A helper 
// supporting both push and fetch can use this to distinguish for which 
// operation the output of list is going to be used, possibly reducing 
// the amount of work that needs to be performed.
// Supported if the helper has the "push" or "export" capability.
const handleList = async (address) => {
    // fetch the refmap
    initMirrorRepo()
    spawnSync('git', 
        ['fetch', address, `+${CRYPT_MAP}:${CRYPT_MAP}`],
        SPAWN_MIRROR_OPTS)

    // for each ls-remote entry look up the oid in refmap
    let ls = spawn('git', ['ls-remote', '-q', address], SPAWN_OPTS)
    for await (const line of lines(ls.stdout)) {
        let [oid, ref] = line.split("\t")
        log.verbose("org ref: %s %s", oid, ref)
        if (ref != CRYPT_MAP) {
            oid = await get(SPAWN_MIRROR_OPTS, CRYPT_MAP, oid)
        }
        console.log(oid, ref)
        log.verbose("new ref: %s %s", oid, ref)
    }

    console.log()
}

// create encrypted repo in .git if it doesn't already exist (git init does this for you)
// e.g. git init .git/gitern/encrypt
// bare doesn't work for some reason. Might need to set GIT_DIR
const initMirrorRepo = () => {
    spawnSync('git', ['init', GITERN_MIRROR_REPO], SPAWN_OPTS)
}

// push +<src>:<dst> 
// Pushes the given local <src> commit or branch to the remote
// branch described by <dst>. A batch sequence of one or more push commands is
// terminated with a blank line (if there is only one reference to push, a
// single push command is followed by a blank line). For example, the following
// would be two batches of push, the first asking the remote-helper to push the
// local ref master to the remote ref master and the local HEAD to the remote
// branch, and the second asking to push ref foo to ref bar (forced update
// requested by the +).
//
// push refs/heads/master:refs/heads/master
// push HEAD:refs/heads/branch
// \n
// push +refs/heads/foo:refs/heads/bar
// \n
//
// Zero or more protocol options may be entered after the last push command,
// before the batch’s terminating blank line. When the push is complete, outputs
// one or more ok <dst> or error <dst> <why>? lines to indicate success or
// failure of each pushed ref. The status report output is terminated by a blank
// line. The option field <why> may be quoted in a C style string if it contains
// an LF. Supported if the helper has the "push" capability. 
const handlePushBatch = async (address, remote, refspecs) => {
    initMirrorRepo()
    log.verbose("pushing refspecs %o", refspecs)

    let dsts = []
    for (const refspec of refspecs) {
        var [src, dst] = refspec.split(':')
        dsts.push(dst)

        // using plumbing, mirror.js, mirror relevant commits into .git/gitern/encrypt
        mirror = new Mirror(".", GITERN_MIRROR_REPO, true, address, CRYPT_MAP)
        await mirror.mirror(src, remote, true)
        log.info("completed mirror for push %s", src)
    }

    // push to remote from mirror
    // TODO: for CRYPT_MAP use with force-with-lease to guarantee
    //       we're pushing to the right thing (we currently just force)
    //       to make --force-with-lease work we need to grab the original
    //       hash of crypt.map before mirroring
    log.error("%o %o", refspecs, ...refspecs)
    var push = spawnSync('git', ['push', '--atomic', address, ...refspecs, '+'+CRYPT_MAP], {
        ...SPAWN_OPTS,
        cwd: resolve(GITERN_MIRROR_REPO)
    })

    var status = push.status == 0 ? "ok" : "error"
    for (const dst of dsts) {
        log.verbose("push status %s %s %s", status, dst, push.stdout.toString())
        console.log(status, dst)
    }

    log.info("completed push %s %s:%s", status, src, dst)
    console.log()
}

// fetch <sha1> <name> 
// Fetches the given object, writing the necessary objects
// to the database. Fetch commands are sent in a batch, one per line, terminated
// with a blank line. Outputs a single blank line when all fetch commands in the
// same batch are complete. Only objects which were reported in the output of
// list with a sha1 may be fetched this way.
//
// Optionally may output a lock <file> line indicating the full path of a file
// under $GIT_DIR/objects/pack which is keeping a pack until refs can be
// suitably updated. The path must end with .keep. This is a mechanism to name a
// <pack,idx,keep> tuple by giving only the keep component. The kept pack will
// not be deleted by a concurrent repack, even though its objects may not be
// referenced until the fetch completes. The .keep file will be deleted at the
// conclusion of the fetch.
//
// If option check-connectivity is requested, the helper must output
// connectivity-ok if the clone is self-contained and connected.

// TODO: when we clone we're not in the right dir (need to support options)
const handleFetchBatch = async (address, remote, refs) => {
    initMirrorRepo()
    log.error("ji")
    log.debug("%o",refs)

    // pull into mirror so it fast-forwards
    var pull = spawnSync('git', ['pull', address, ...refs], {
        ...SPAWN_OPTS,
        cwd: resolve(GITERN_MIRROR_REPO)
    })

    for (const ref of refs) {
        // mirror relevant commits from .git/gitern/encrypt
        mirror = new Mirror(GITERN_MIRROR_REPO, ".", false, address, CRYPT_MAP)
        await mirror.mirror(ref, remote)
        log.info("completed mirror for fetch %s", ref)
    }

    log.info("complete fetch")
    console.log()
}

const main = async () => {
    // todo: configure log level on options
    log.transports[0].level = 'debug'

    log.verbose("command args %s", process.argv);

    let remote = process.argv[2]
    let address = "git@gitern.com:" + process.argv[3].slice("gitern://".length)
    let pushes = new Set()
    let fetches = new Set()

    for await (const line of lines(process.stdin)) {
        log.info("git line '%s'", line)
        if (line == "capabilities") {
            handleCapabilities()
        } else if (line.startsWith("list")) {
            await handleList(address)
        } else if (line.startsWith("push")) {
            pushes.add(line.split(' ')[1])
        } else if (line.startsWith("fetch")) {
            fetches.add(line.split(' ')[2])
        } else if (line == "") {
            if (pushes.size > 0) {
                await handlePushBatch(address, remote, pushes)
                pushes.clear()
            }
            if (fetches.size > 0) {
                await handleFetchBatch(address, remote, fetches)
                fetches.clear()
            }
        }
    }
}

main()