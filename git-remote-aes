#!/usr/bin/env node
// see https://git-scm.com/docs/git-remote-helpers for details
const { spawn, spawnSync } = require('child_process')
const readline = require('readline')
const { resolve } = require('path')
const Mirror = require('./mirror.js')

const handleCapabilities = async () => {
    caps = ["fetch", "push"] //, "option"]
    caps.forEach((s, i) => console.log(s))
    console.log()
}

// list
// Lists the refs, one per line, in the format "<value> <name> [<attr>
// …​]". The value may be a hex sha1 hash, "@<dest>" for a symref, or
// "?" to indicate that the helper could not get the value of the
// ref. A space-separated list of attributes follows the name;
// unrecognized attributes are ignored. The list ends with a blank
// line.
//
// list for-push
// Similar to list, except that it is used if and only if the caller 
// wants to the resulting ref list to prepare push commands. A helper 
// supporting both push and fetch can use this to distinguish for which 
// operation the output of list is going to be used, possibly reducing 
// the amount of work that needs to be performed.
// Supported if the helper has the "push" or "export" capability.

const handleList = async (args) => {
    // I believe all this does is what you get by calling
    // git ls-remote -q
    // alternatively we can call git-update-server-info to generate the
    // a file that we send back https://www.git-scm.com/docs/git-update-server-info
    let ls = spawn('git ls-remote -q', [args], {
        shell: true
    })
    let rl = readline.createInterface({
        input: ls.stdout,
        terminal: false
    })

    for await (const line of rl) {
        let tokens = line.split("\t")
        console.log(tokens[0], tokens[1])
        console.error(tokens[0], tokens[1])
    }

    console.log()
}

// create encrypted repo in .git if it doesn't already exist (git init does this for you)
// e.g. git init .git/gitern/encrypt
// bare doesn't work for some reason. Might need to set GIT_DIR
const GITERN_MIRROR_REPO = ".git/gitern/encrypt"
const initMirrorRepo = () => {
    spawnSync('git init', [GITERN_MIRROR_REPO], {
        shell: true,
        stdio: ['pipe', 'pipe', 'inherit'],
    })
}

// push +<src>:<dst> 
// Pushes the given local <src> commit or branch to the remote
// branch described by <dst>. A batch sequence of one or more push commands is
// terminated with a blank line (if there is only one reference to push, a
// single push command is followed by a blank line). For example, the following
// would be two batches of push, the first asking the remote-helper to push the
// local ref master to the remote ref master and the local HEAD to the remote
// branch, and the second asking to push ref foo to ref bar (forced update
// requested by the +).
//
// push refs/heads/master:refs/heads/master
// push HEAD:refs/heads/branch
// \n
// push +refs/heads/foo:refs/heads/bar
// \n
//
// Zero or more protocol options may be entered after the last push command,
// before the batch’s terminating blank line. When the push is complete, outputs
// one or more ok <dst> or error <dst> <why>? lines to indicate success or
// failure of each pushed ref. The status report output is terminated by a blank
// line. The option field <why> may be quoted in a C style string if it contains
// an LF. Supported if the helper has the "push" capability. 
//
// TODO: you can push a batch by just space seperating more refspecs 
// XXX it's unclear to me when a batch is used and when it isn't
const handlePushBatch = async (address, remote, refspecs) => {
    initMirrorRepo()

    let dsts = []
    for (const refspec of refspecs) {
        var [src, dst] = refspec.split(':')
        dsts.push(dst)

        // using plumbing, mirror.js, mirror relevant commits into .git/gitern/encrypt
        mirror = new Mirror(".", GITERN_MIRROR_REPO)
        await mirror.mirror(src, remote, true)
        console.error("COMPLETED MIRROR", src)
    }

    // push to remote from mirror
    var push = spawnSync('git push', [address, ...refspecs], {
        shell: true,
        cwd: resolve(GITERN_MIRROR_REPO),
        stdio: ['pipe', 'pipe', 'inherit'],
    })

    var status = push.status == 0 ? "ok" : "error"
    for (const dst of dsts) {
        console.error(status, push.stdout.toString())
        console.log(status, dst)
    }

    console.error("COMPLETED PUSH", status, src, dst)
    console.log()
}

// fetch <sha1> <name> 
// Fetches the given object, writing the necessary objects
// to the database. Fetch commands are sent in a batch, one per line, terminated
// with a blank line. Outputs a single blank line when all fetch commands in the
// same batch are complete. Only objects which were reported in the output of
// list with a sha1 may be fetched this way.
//
// Optionally may output a lock <file> line indicating the full path of a file
// under $GIT_DIR/objects/pack which is keeping a pack until refs can be
// suitably updated. The path must end with .keep. This is a mechanism to name a
// <pack,idx,keep> tuple by giving only the keep component. The kept pack will
// not be deleted by a concurrent repack, even though its objects may not be
// referenced until the fetch completes. The .keep file will be deleted at the
// conclusion of the fetch.
//
// If option check-connectivity is requested, the helper must output
// connectivity-ok if the clone is self-contained and connected.

// TODO: when we clone we're not in the right dir
const handleFetchBatch = async (address, remote, refs) => {
    initMirrorRepo()

    // fetch from remote to mirror
    // we don't do auto-gc because we'll be fetching from an
    // encrypted remote ... gc doesn't make sense
    var push = spawnSync('git fetch --no-auto-gc', [address, ...refs], {
        shell: true,
        cwd: resolve(GITERN_MIRROR_REPO),
        stdio: ['pipe', 'pipe', 'inherit'],
    })

    for (const ref of refs) {
        // using plumbing, mirror.js, mirror relevant commits from .git/gitern/encrypt
        mirror = new Mirror(GITERN_MIRROR_REPO, ".")
        await mirror.mirror(ref, remote, false)
        console.error("COMPLETED MIRROR", ref)
    }

    console.error("COMPLETED FETCH")
    console.log()
}


// TODO: fetch into mirror?
// we'll need to store encrypted objects, then walk through and decrypt them
// git fetch will retreive the remote ref into the mirror
// from there, we'll need to walk the commits we pull down and store them
// in the local repo
const handleFetch = async (address, remote, ref) => {
    let refspec = `${ref}:refs/remotes/${remote}/${ref}`
    console.error("git fetch", address, refspec)
    let fetch = spawnSync('git fetch', [address, refspec], {
        shell: true
    })

    console.log()
}

const main = async () => {
    console.error(process.argv);

    let rl = readline.createInterface({
        input: process.stdin,
        terminal: false
    })

    let remote = process.argv[2]
    let address = "git@gitern.com:" + process.argv[3].slice("aes://".length)
    let pushes = []
    let fetches = []

    for await (const line of rl) {
        console.error(line)
        if (line == "capabilities") {
            handleCapabilities()
        } else if (line.startsWith("list")) {
            await handleList(address)
        } else if (line.startsWith("push")) {
            pushes.push(line.split(' ')[1])
        } else if (line.startsWith("fetch")) {
            fetches.push(line.split(' ')[1])
        } else if (line == "") {
            if (pushes.length > 0) {
                handlePushBatch(address, remote, pushes)
            }
            if (fetches.length > 0) {
                handleFetchBatch(address, remote, fetches)
            }
        }
    }
}

main()