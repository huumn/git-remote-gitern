#!/usr/bin/env node
// see https://git-scm.com/docs/git-remote-helpers for details
const { git, gitSync } = require('./git.js')
const path = require('path')
const Mirror = require('./mirror.js')
const log = require('./logger.js')
const { lines } = require('./misc.js')
const { get } = require('./map.js')
const Keys = require('./keys.js')
const { exit } = require('process')

const GIT_DIR = process.env.GIT_DIR
const DIR = path.resolve(GIT_DIR + "/..")
const MIRROR_DIR = GIT_DIR + "/gitern"
const CRYPT_MAP = "refs/gitern/crypt.map"
const CRYPT_KEYS = "refs/gitern/crypt.keys"

const handleCapabilities = async () => {
    caps = ["fetch", "push", "option"]
    caps.forEach((s, i) => console.log(s))
    console.log()
}

// we only support verbosity and TODO cloning currently
const handleOption = async (option, arg) => {
    log.debug("setting option %s to %s", option, arg)
    switch(option) {
        case "verbosity":
            // default to 'info' == 2
            log.transports[0].level = 
                Object.keys(log.levels).find(key => log.levels[key] == Number(arg) + 1)
            console.log("ok")
            break
        case "cloning":
            // we don't support cloning because after a clone
            // git deletes any GIT_DIRS inside GIT_DIR so
            // gitern/crypt is useless
            console.error("cloning is not supported (use git init & git pull)")
            process.exit(1)
        default:
            console.log("unsupported")
            break
    }
}

// when we startup we need to see if there's a tree of keys
// perhaps they can be tagged at crypt.keys 
// keys meaning a 256 bit aes key encrypted with every gitern user's
// SSH pub keys

// list
// Lists the refs, one per line, in the format "<value> <name> [<attr>
// …​]". The value may be a hex sha1 hash, "@<dest>" for a symref, or
// "?" to indicate that the helper could not get the value of the
// ref. A space-separated list of attributes follows the name;
// unrecognized attributes are ignored. The list ends with a blank
// line.
//
// list for-push
// Similar to list, except that it is used if and only if the caller 
// wants to the resulting ref list to prepare push commands. A helper 
// supporting both push and fetch can use this to distinguish for which 
// operation the output of list is going to be used, possibly reducing 
// the amount of work that needs to be performed.
// Supported if the helper has the "push" or "export" capability.
const handleList = async (address) => {
    log.debug("handle list address %s", address)

    // fetch crypt.map and crypt.keys
    initMirrorRepo()
    gitSync(['fetch', address, `+${CRYPT_MAP}:${CRYPT_MAP}`, 
        `+${CRYPT_KEYS}:${CRYPT_KEYS}`],
        {cwd: MIRROR_DIR, ignoreErr: true})

    // for each ls-remote entry look up the oid in refmap
    let ls = git(['ls-remote', '-q', address], {cwd: MIRROR_DIR})
    for await (const line of lines(ls.stdout)) {
        let [oid, ref] = line.split("\t")
        if (ref != CRYPT_MAP && ref != CRYPT_KEYS) {
            let newoid = await get(MIRROR_DIR, CRYPT_MAP, oid)
            if (!newoid) {
                log.error("Could not find object %s (%s) in ref map", oid, ref)
                process.exit(1)
            }
            console.log(newoid, ref)
            log.debug("ref: %s=>%s %s", oid, newoid, ref)
        }   
    }

    console.log()
}

// create encrypted repo in .git if it doesn't already exist (git init does this for you)
// e.g. git init .git/gitern
// XXX bare doesn't work for some reason. Might need to set GIT_DIR
const initMirrorRepo = () => {
    log.verbose("(re)initing mirror repo")
    gitSync(['init', MIRROR_DIR])
}

// push +<src>:<dst> 
// Pushes the given local <src> commit or branch to the remote
// branch described by <dst>. A batch sequence of one or more push commands is
// terminated with a blank line (if there is only one reference to push, a
// single push command is followed by a blank line). For example, the following
// would be two batches of push, the first asking the remote-helper to push the
// local ref master to the remote ref master and the local HEAD to the remote
// branch, and the second asking to push ref foo to ref bar (forced update
// requested by the +).
//
// push refs/heads/master:refs/heads/master
// push HEAD:refs/heads/branch
// \n
// push +refs/heads/foo:refs/heads/bar
// \n
//
// Zero or more protocol options may be entered after the last push command,
// before the batch’s terminating blank line. When the push is complete, outputs
// one or more ok <dst> or error <dst> <why>? lines to indicate success or
// failure of each pushed ref. The status report output is terminated by a blank
// line. The option field <why> may be quoted in a C style string if it contains
// an LF. Supported if the helper has the "push" capability. 
const handlePushBatch = async (address, account, remote, refspecs) => {
    log.debug("handle push address %s remote %s refs %o", address, remote, refspecs)

    log.debug("pushing refspecs %o", refspecs)

    // update crypt.keys
    let keys = new Keys(CRYPT_KEYS, MIRROR_DIR)
    await keys.load()
    await keys.save(account)

    let dsts = []
    for (const refspec of refspecs) {
        var [src, dst] = refspec.split(':')
        dsts.push(dst)

        // using plumbing, mirror.js, mirror relevant commits into .git/gitern/encrypt
        let mirror = new Mirror(DIR, MIRROR_DIR, true, CRYPT_MAP, keys.key)
        await mirror.mirror(src, remote, true)
        log.debug("completed mirror for push %s", src)
    }

    // push to remote from mirror
    // TODO: for CRYPT_MAP use with force-with-lease to guarantee
    //       we're pushing to the right thing (we currently just force)
    //       to make --force-with-lease work we need to grab the original
    //       hash of crypt.map before mirroring
    var push = gitSync(['push', '--atomic', address, ...refspecs, '+'+CRYPT_MAP, '+'+CRYPT_KEYS], 
        {cwd: MIRROR_DIR, verbose: true})

    var status = push.status == 0 ? "ok" : "error"
    for (const dst of dsts) {
        log.debug("push status %s %s %s", status, dst, push.stdout.toString())
        console.log(status, dst)
    }

    log.verbose("completed push %o", refspecs)
}

// fetch <sha1> <name> 
// Fetches the given object, writing the necessary objects
// to the database. Fetch commands are sent in a batch, one per line, terminated
// with a blank line. Outputs a single blank line when all fetch commands in the
// same batch are complete. Only objects which were reported in the output of
// list with a sha1 may be fetched this way.
//
// Optionally may output a lock <file> line indicating the full path of a file
// under $GIT_DIR/objects/pack which is keeping a pack until refs can be
// suitably updated. The path must end with .keep. This is a mechanism to name a
// <pack,idx,keep> tuple by giving only the keep component. The kept pack will
// not be deleted by a concurrent repack, even though its objects may not be
// referenced until the fetch completes. The .keep file will be deleted at the
// conclusion of the fetch.
//
// If option check-connectivity is requested, the helper must output
// connectivity-ok if the clone is self-contained and connected.
const handleFetchBatch = async (address, remote, refs) => {
    log.debug("handle fetch address %s remote %s refs %o", address, remote, refs)

    // pull into mirror so it merges
    gitSync(['pull', address, ...refs], {cwd: MIRROR_DIR, verbose: true})

    // load crypt.keys
    let keys = new Keys(CRYPT_KEYS, MIRROR_DIR)
    await keys.load()

    for (const ref of refs) {
        // mirror relevant commits from encrypted
        let mirror = new Mirror(MIRROR_DIR, DIR, false, CRYPT_MAP, keys.key)
        await mirror.mirror(ref, remote)
        log.verbose("completed mirror for fetch %s", ref)
    }

    log.verbose("complete fetch for %o", refs)
}

const GITERN_PREFIX = "gitern://"
const SSH_PREFIX = "git@gitern.com:"
const parseAddr = (address) => {
    let uri = address.replace(GITERN_PREFIX, '')
    let account = uri.split(path.sep).filter((p) => p.length)[0]
    return {
        sshAddr: SSH_PREFIX + uri,
        account,
    }
}

const main = async () => {
    let remote = process.argv[2]
    let {sshAddr, account} = parseAddr(process.argv[3])
    let pushes = new Set()
    let fetches = new Set()

    for await (const line of lines(process.stdin)) {
        log.verbose("git command '%s'", line)
        if (line == "capabilities") {
            handleCapabilities()
        } else if (line.startsWith("option")) {
            let [, option, arg] = line.split(' ')
            await handleOption(option, arg)
        } else if (line.startsWith("list")) {
            await handleList(sshAddr)
        } else if (line.startsWith("push")) {
            pushes.add(line.split(' ')[1])
        } else if (line.startsWith("fetch")) {
            fetches.add(line.split(' ')[2])
        } else if (line == "") {
            if (pushes.size > 0) {
                await handlePushBatch(sshAddr, account, remote, pushes)
                pushes.clear()
                console.log()
            } else if (fetches.size > 0) {
                await handleFetchBatch(sshAddr, remote, fetches)
                console.log()
                fetches.clear()
            } else {
                process.exit(0)
            }
        }
    }
}

main()